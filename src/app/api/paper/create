import { connect } from '@/db/dbConnnect';
import User from '@/modules/UserSchema';
import QuestionPaper from '@/modules/QuestionPaperSchema';
import Department from '@/modules/DepartmentSchema'; // Assuming you have a Department schema
import { NextRequest, NextResponse } from 'next/server';
import jwt from "jsonwebtoken";

connect();

async function authenticateUser(request = NextRequest) {
    const token = request.headers.get('Authorization')?.replace('Bearer ', '');
    if (!token) {
        return NextResponse.json({ message: "No token provided" }, { status: 401 });
    }

    try {
        const decoded = jwt.verify(token, process.env.TOKEN_SECRET);
        if (!['Admin', 'COE', 'HOD', 'Teacher'].includes(decoded.role)) {
            return NextResponse.json({ error: "Not authorized to create Question Papers" }, { status: 403 });
        }
        return decoded;
    } catch (e) {
        return NextResponse.json({ error: `Error: ${e.message}` }, { status: 500 });
    }
}

export async function POST(request = NextRequest) {
    try {
        const userAuth = await authenticateUser(request);
        if (userAuth instanceof NextResponse) {
            return userAuth;
        }

        const reqBody = await request.json();
        const { 
            programName, 
            semester, 
            subjectName, 
            subjectCode, 
            totalMarks, 
            timeAllowed, 
            totalQuestions,
            departmentId 
        } = reqBody;

        // Validation
        if (!programName || !semester || !subjectName || !subjectCode || !totalMarks || !timeAllowed || !totalQuestions || !departmentId) {
            return NextResponse.json({ error: "All fields are required" }, { status: 400 });
        }

        const user = await User.findOne({ email: userAuth.email });
        if (!user) {
            return NextResponse.json({ error: "User not found" }, { status: 404 });
        }

        // Check if the user has permission to create a question paper for this department
        const department = await Department.findById(departmentId);
        if (!department) {
            return NextResponse.json({ error: "Department not found" }, { status: 404 });
        }

        if (user.role === 'Teacher' && !department.teachers.includes(user._id)) {
            return NextResponse.json({ error: "You are not authorized to create a question paper for this department" }, { status: 403 });
        }

        if (user.role === 'HOD' && department.hod.toString() !== user._id.toString()) {
            return NextResponse.json({ error: "You are not the HOD of this department" }, { status: 403 });
        }

        const newQuestionPaper = new QuestionPaper({
            programName,
            semester,
            subjectName,
            subjectCode,
            totalMarks,
            timeAllowed,
            totalQuestions,
            department: departmentId,
            createdBy: user._id,
            status: 'draft'
        });

        if (user.role === 'Teacher') {
            newQuestionPaper.allocatedTeachers = [user._id];
        }

        const savedQuestionPaper = await newQuestionPaper.save();

        // Update department's questionPapers array
        department.questionPapers.push(savedQuestionPaper._id);
        await department.save();

        return NextResponse.json({
            message: "Question Paper created successfully",
            questionPaperId: savedQuestionPaper._id
        }, { status: 201 });

    } catch (e) {
        console.error(e);
        return NextResponse.json({ error: `Error: ${e.message}` }, { status: 500 });
    }
}